{"version":3,"sources":["upload-solid.svg","download-solid.svg","PathSplitter.js","Images.js","OptimizeSvg.js","App.js","reportWebVitals.js","index.js"],"names":["PathSplitter","pathData","paths","ps","p","sleep","setTimeout","key","hasOwnProperty","clone","obj","Object","res","constructor","pathClone","pathArray","toString","getNextEndPoint","end_point","command","x","y","toLowerCase","isRelative","length","endSubPath","commands","index","path_string","path_commands","pathString","pth","arr","paramCounts","a","c","o","h","l","m","r","q","s","t","v","u","z","data","Array","isArray","pathValues","String","replace","b","params","name","push","concat","splice","parsePathString","sub_paths","i","sub_path","join","pathToAbsoluteSubPaths","Images","fileInputField","useRef","outputFileContainer","useState","inputFile","setInputFile","outputFile","setOutputFile","dragging","setDragging","width","setWidth","height","setHeight","setWidthAndHeight","w","handleInputFile","file","inputFileUrl","outputFileSetter","imageDimensSetter","request","XMLHttpRequest","open","setRequestHeader","addEventListener","event","response","target","responseText","xml","DOMParser","parseFromString","allPaths","getElementsByTagName","oldPathToNewPathsMap","forEach","path","parentNode","newPathNodes","getAttribute","pathDataPart","newPath","cloneNode","setAttribute","existingData","oldPathNodes","keys","parentNodeKey","oldPath","removeChild","appendChild","svgData","XMLSerializer","serializeToString","send","OptimizeSvg","URL","createObjectURL","handleUploadAction","current","click","didUploadSvgFile","type","split","indexOf","innerHTML","className","style","display","ref","onChange","e","files","src","alt","uploadIcon","onClick","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","dataTransfer","downloadIcon","color","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAAe,G,MAAA,IAA0B,0CCA1B,MAA0B,2C,OCmClC,SAASA,EAAaC,GACzB,SAASC,EAAMC,GACX,IAAIC,EAAKF,EAAMC,GAAKD,EAAMC,IAAM,GAehC,OAdIC,EAAED,GACFC,EAAED,GAAIE,MAAQ,IAEdD,EAAED,GAAM,CACJE,MAAO,KAGfC,YAAW,WACP,IAAK,IAAIC,KAAOH,EACRA,EAAEI,eAAeD,IAAQA,IAAQJ,IACjCC,EAAEG,GAAKF,SACND,EAAEG,GAAKF,cAAgBD,EAAEG,OAG/BH,EAAED,GAGb,SAASM,EAAMC,GACX,GAAkB,mBAAPA,GAAqBC,OAAOD,KAASA,EAC5C,OAAOA,EAEX,IAAIE,EAAM,IAAIF,EAAIG,YAClB,IAAK,IAAIN,KAAOG,EACRA,EAAIF,eAAeD,KACnBK,EAAIL,GAAOE,EAAMC,EAAIH,KAE7B,OAAOK,EAGX,SAASE,EAAUC,GACf,IAAIH,EAAMH,EAAMM,GAEhB,OADAH,EAAII,SAAWA,SACRJ,EAiGX,SAASK,EAAgBC,EAAWC,GAChC,IAAIC,EAAIF,EAAU,GACdG,EAAIH,EAAU,GAClB,GAsCJ,SAAoBC,GAChB,OAAOA,EAAQ,KAAOA,EAAQ,GAAGG,cAvC7BC,CAAWJ,GACX,OAAQA,EAAQ,IACZ,IAAK,IACDC,GAAKD,EAAQ,GACb,MACJ,IAAK,IACDE,GAAKF,EAAQ,GACb,MACJ,IAAK,IAEDC,EAAI,EACJC,EAAI,EACJ,MACJ,QACID,GAAKD,EAAQA,EAAQK,OAAS,GAC9BH,GAAKF,EAAQA,EAAQK,OAAS,QAGtC,OAAQL,EAAQ,IACZ,IAAK,IACDC,EAAID,EAAQ,GACZ,MACJ,IAAK,IACDE,EAAIF,EAAQ,GACZ,MACJ,IAAK,IAEDC,EAAI,EACJC,EAAI,EACJ,MACJ,QACID,EAAID,EAAQA,EAAQK,OAAS,GAC7BH,EAAIF,EAAQA,EAAQK,OAAS,GAGzC,MAAO,CAACJ,EAAGC,GAOf,SAASI,EAAWC,EAAUC,GAC1B,OAAIA,GAASD,EAASF,QAG0B,MAArCE,EAASC,GAAO,GAAGL,cAIlC,OAnFA,SAAgCM,GAO5B,IANA,IAAIC,EAjER,SAAyBC,GACrB,IAAKA,EACD,OAAO,KAEX,IAAIC,EAAM7B,EAAM4B,GAChB,GAAIC,EAAIC,IACJ,OAAOlB,EAAUiB,EAAIC,KAGzB,IAAIC,EAAc,CACVC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,GAEPC,EAAO,GAKX,GAJIC,MAAMC,QAAQnB,IAAekB,MAAMC,QAAQnB,EAAW,MAEtDiB,EAAOjC,EAAUgB,KAEhBiB,EAAKvB,OAAQ,CACd,IACM0B,EAAa,6CACnBC,OAAOrB,GAAYsB,QAFC,8DAEoB,SAAUlB,EAAGmB,EAAGlB,GACpD,IAAImB,EAAS,GACTC,EAAOF,EAAE/B,cAYb,GAXAa,EAAEiB,QAAQF,GAAY,SAAUhB,EAAGmB,GAC/BA,GAAKC,EAAOE,MAAMH,MAET,MAATE,GAAgBD,EAAO9B,OAAS,IAChCuB,EAAKS,KAAK,CAACH,GAAGI,OAAOH,EAAOI,OAAO,EAAG,KACtCH,EAAO,IACPF,EAAU,MAANA,EAAY,IAAM,KAEb,MAATE,GAAkC,IAAlBD,EAAO9B,QACvBuB,EAAKS,KAAK,CAACH,EAAGC,EAAO,KAEZ,MAATC,EACAR,EAAKS,KAAK,CAACH,GAAGI,OAAOH,SAErB,KAAOA,EAAO9B,QAAUS,EAAYsB,KAChCR,EAAKS,KACD,CAACH,GAAGI,OAAOH,EAAOI,OAAO,EAAGzB,EAAYsB,MAEvCtB,EAAYsB,UAQjC,OAFAR,EAAK/B,SAAWd,EAAMc,SACtBe,EAAIC,IAAMlB,EAAUiC,GACbA,EAIaY,CAAgB/B,GAChCV,EAAY,CAAC,EAAG,GAChB0C,EAAY,GACZzC,EAAU,GACV0C,EAAI,EAEDA,EAAIhC,EAAcL,QAAQ,CAE7BN,EAAYD,EAAgBC,EAD5BC,EAAUU,EAAcgC,IAEL,MAAf1C,EAAQ,KACRA,EAAU,CAAC,IAAKD,EAAU,GAAIA,EAAU,KAE5C,IAAI4C,EAAW,CAAC3C,EAAQ4C,KAAK,MAI7B,IAFAF,KAEQpC,EAAWI,EAAegC,IAC9B1C,EAAUU,EAAcgC,GACxBC,EAASN,KAAKrC,EAAQ4C,KAAK,MAC3B7C,EAAYD,EAAgBC,EAAWC,GACvC0C,IAGJD,EAAUJ,KAAKM,EAASC,KAAK,MAGjC,OAAOH,EAwDJI,CAAuB/D,G,WCtNnB,SAASgE,IACpB,IAAMC,EAAiBC,iBAAO,MACxBC,EAAsBD,iBAAO,MAFN,EAGKE,mBAAS,MAHd,mBAGtBC,EAHsB,KAGXC,EAHW,OAIOF,mBAAS,MAJhB,mBAItBG,EAJsB,KAIVC,EAJU,OAKGJ,oBAAS,GALZ,mBAKtBK,EALsB,KAKZC,EALY,OAMHN,mBAAS,GANN,mBAMtBO,EANsB,KAMfC,EANe,OAODR,mBAAS,GAPR,mBAOtBS,EAPsB,KAOdC,EAPc,KAoCvBC,EAAoB,SAACC,EAAG5C,GAC1BwC,EAASI,GACTF,EAAU1C,IAGR6C,EAAkB,SAAAC,GACpBZ,EAAaY,GC9Cd,SAAqBC,EAAcC,EAAkBC,GACxD,IAAIC,EAAU,IAAIC,eAClBD,EAAQE,KAAK,MAAOL,GACpBG,EAAQG,iBAAiB,eAAgB,iBACzCH,EAAQI,iBAAiB,QAAQ,SAAUC,GACvC,IAAIC,EAAWD,EAAME,OAAOC,aAExBC,GADM,IAAIC,WACAC,gBAAgBL,EAAU,iBAExCP,EAAkBU,EAAIpB,MAAOoB,EAAIlB,QAGjC,IAAMqB,EAAQ,YAAOH,EAAII,qBAAqB,SACxCC,EAAuB,GAC7BF,EAASG,SAAQ,SAACC,EAAM5E,GACpB,IAAM6E,EAAaD,EAAKC,WAClBC,EAAe,GACrBzG,EAAauG,EAAKG,aAAa,MAAMJ,SAAQ,SAAAK,GACzC,IAAMC,EAAUL,EAAKM,WAAU,GAC/BD,EAAQE,aAAa,IAAKH,GAC1BF,EAAajD,KAAKoD,MAItB,IAAMG,EAAeV,EAAqBG,EAAWxF,YAEjDqF,EAAqBG,EAAWxF,YADhC+F,EAC8C,CAC1CP,aACAQ,aAAa,GAAD,mBAAMD,EAAaC,cAAnB,CAAiCT,IAC7CE,aAAa,GAAD,mBACLM,EAAaN,cACbA,IAImC,CAC1CD,aACAQ,aAAc,CAACT,GACfE,aAAcA,MAM1B9F,OAAOsG,KAAKZ,GAAsBC,SAAQ,SAAAY,GAAkB,IAAD,EAKnDb,EAAqBa,GAHrBV,EAFmD,EAEnDA,WACAQ,EAHmD,EAGnDA,aACAP,EAJmD,EAInDA,aAEJO,EAAaV,SAAQ,SAAAa,GAAO,OAAIX,EAAWY,YAAYD,MACvDV,EAAaH,SAAQ,SAAAM,GAAO,OAAIJ,EAAWa,YAAYT,SAI3D,IAAIU,GAAU,IAAIC,eAAgBC,kBAAkBxB,GACpDX,EAAiBiC,MAEd/B,EAAQkC,ODXXC,CACIC,IAAIC,gBAAgBzC,GACpBV,EACAO,IAKF6C,EAAqB,WACvB3D,EAAe4D,QAAQC,SAGrBC,EACF1D,GACiC,UAAjCA,EAAU2D,KAAKC,MAAM,KAAK,KACuB,IAAjD5D,EAAU2D,KAAKC,MAAM,KAAK,GAAGC,QAAQ,OAOzC,OAJIH,GAAoBxD,IACpBJ,EAAoB0D,QAAQM,UAAY5D,GAIxC,sBAAK6D,UAAU,SAAf,UACI,uBACIC,MAAO,CAACC,QAAS,QACjBN,KAAK,OACLO,IAAKtE,EACLuE,SA1CgB,SAAAC,GAAM,IACvBC,EAASD,EAAE5C,OAAX6C,MACc,IAAjBA,EAAMnH,QACN0D,EAAgByD,EAAM,OAyCrBX,EACG,sBAAKK,UAAU,eAAf,UACI,qBACIA,UAAU,oBACVO,IAAKjB,IAAIC,gBAAgBtD,GACzBuE,IAAI,YACJjE,MAAOA,EACPE,OAAQA,IAEZ,qBACI8D,IAAKE,EACLT,UAAU,+BACVU,QAASlB,EACTgB,IAAI,cACJjE,MAAM,KACNE,OAAO,UAGf,sBACIuD,UAAS,yCACL3D,EAAW,YAAc,IAE7BqE,QAASlB,EACTmB,WAvFS,SAAAN,GACrBA,EAAEO,kBAuFUC,YApFI,SAAAR,GAChB/D,GAAY,IAoFAwE,YAjFI,SAAAT,GAChB/D,GAAY,IAiFAyE,OA9EC,SAAAV,GACbA,EAAEO,iBACF,IAAMN,EAAQD,EAAEW,aAAaV,MACR,IAAjBA,EAAMnH,QACN0D,EAAgByD,EAAM,KAkElB,UASI,yDACA,uBACA,uEAGR,sBAAKN,UAAS,uBAAkB7D,EAAa,GAAK,SAAlD,UACI,sBACI6D,UAAU,qBACVG,IAAKpE,IACT,qBACIwE,IAAKU,EACLjB,UAAU,iCACVU,QAASlB,EACTgB,IAAI,gBACJjE,MAAM,KACNE,OAAO,KACPyE,MAAM,kBE1GXC,MAbf,WACI,OACI,sBAAKnB,UAAU,MAAf,UACI,yBAAQA,UAAU,aAAlB,0BAEI,kFAGJ,cAAC,EAAD,QCGGoB,EAdS,SAAAC,GAChBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MACjB,YAAgD,IAA9CC,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QAC9BJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFxBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.f2973b5c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/upload-solid.9119417e.svg\";","export default __webpack_public_path__ + \"static/media/download-solid.81e6bda5.svg\";","/**\n * Reference - https://gist.github.com/iconifyit/958e7abba71806d663de6c2c273dc0da\n * This script was taken from a discussion on Google Groups.\n * I'm not taking credit for it but sharing it because it is very useful for splitting\n * discontinuous absolute paths into continuous subpaths. Where this is particularly\n * useful is for importing SVG files into applications like Figma, Sketch, InVision, XD, etc.\n */\n/**\n * Split discontinuous absolute paths into continuous sub-paths.\n *\n *     Example:\n *\n *     console.log(PathSplitter(\n *         \"M.75,17.25a16.5,16.5,0,0,1,27-12.73\" +\n *         \"m4.88,6.73a16.63,16.63,0,0,1,1.12,6v12a16.5,16.5,0,0,1-16.5,16.5,16.82,16.82,0,0,1-3-.27\" +\n *         \"M6.75,42a16.49,16.49,0,0,1-6-12.73v-4.5\" +\n *         \"m24,4.5v-12a7.5,7.5,0,0,0-12-6\" +\n *         \"m-3,6v12a7.51,7.51,0,0,0,10.5,6.88\" +\n *         \"-3-17.38v9\"\n *     ));\n *\n *     Returns:\n *\n *     [\n *         M 0.75 17.25 a 16.5 16.5 0 0 1 27 -12.73,\n *         M 32.63 11.25 a 16.63 16.63 0 0 1 1.12 6 v 12 a 16.5 16.5 0 0 1 -16.5 16.5 a 16.82 16.82 0 0 1 -3 -0.27,\n *         M 6.75 42 a 16.49 16.49 0 0 1 -6 -12.73 v -4.5,\n *         M 24.75 29.27 v -12 a 7.5 7.5 0 0 0 -12 -6,\n *         M 9.75 17.27 v 12 a 7.51 7.51 0 0 0 10.5 6.88,\n *         M 17.25 18.77 v 9\n *     ]\n * @param   {string}    pathData    The SVG path data string.\n * @returns {Array}\n * @constructor\n */\nexport function PathSplitter(pathData) {\n    function paths(ps) {\n        var p = (paths.ps = paths.ps || {});\n        if (p[ps]) {\n            p[ps].sleep = 100;\n        } else {\n            p[ps] = {\n                sleep: 100\n            };\n        }\n        setTimeout(function () {\n            for (var key in p)\n                if (p.hasOwnProperty(key) && key !== ps) {\n                    p[key].sleep--;\n                    !p[key].sleep && delete p[key];\n                }\n        });\n        return p[ps];\n    }\n\n    function clone(obj) {\n        if (typeof obj == \"function\" || Object(obj) !== obj) {\n            return obj;\n        }\n        var res = new obj.constructor();\n        for (var key in obj)\n            if (obj.hasOwnProperty(key)) {\n                res[key] = clone(obj[key]);\n            }\n        return res;\n    }\n\n    function pathClone(pathArray) {\n        var res = clone(pathArray);\n        res.toString = toString;\n        return res;\n    }\n\n    function parsePathString(pathString) {\n        if (!pathString) {\n            return null;\n        }\n        var pth = paths(pathString);\n        if (pth.arr) {\n            return pathClone(pth.arr);\n        }\n\n        var paramCounts = {\n                a: 7,\n                c: 6,\n                o: 2,\n                h: 1,\n                l: 2,\n                m: 2,\n                r: 4,\n                q: 4,\n                s: 4,\n                t: 2,\n                v: 1,\n                u: 3,\n                z: 0\n            },\n            data = [];\n        if (Array.isArray(pathString) && Array.isArray(pathString[0])) {\n            // rough assumption\n            data = pathClone(pathString);\n        }\n        if (!data.length) {\n            const pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/gi;\n            const pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\s]*,?[\\s]*/gi;\n            String(pathString).replace(pathCommand, function (a, b, c) {\n                var params = [],\n                    name = b.toLowerCase();\n                c.replace(pathValues, function (a, b) {\n                    b && params.push(+b);\n                });\n                if (name === \"m\" && params.length > 2) {\n                    data.push([b].concat(params.splice(0, 2)));\n                    name = \"l\";\n                    b = b === \"m\" ? \"l\" : \"L\";\n                }\n                if (name === \"o\" && params.length === 1) {\n                    data.push([b, params[0]]);\n                }\n                if (name === \"r\") {\n                    data.push([b].concat(params));\n                } else\n                    while (params.length >= paramCounts[name]) {\n                        data.push(\n                            [b].concat(params.splice(0, paramCounts[name]))\n                        );\n                        if (!paramCounts[name]) {\n                            break;\n                        }\n                    }\n            });\n        }\n        data.toString = paths.toString;\n        pth.arr = pathClone(data);\n        return data;\n    }\n\n    function pathToAbsoluteSubPaths(path_string) {\n        var path_commands = parsePathString(path_string),\n            end_point = [0, 0],\n            sub_paths = [],\n            command = [],\n            i = 0;\n\n        while (i < path_commands.length) {\n            command = path_commands[i];\n            end_point = getNextEndPoint(end_point, command);\n            if (command[0] === \"m\") {\n                command = [\"M\", end_point[0], end_point[1]];\n            }\n            var sub_path = [command.join(\" \")];\n\n            i++;\n\n            while (!endSubPath(path_commands, i)) {\n                command = path_commands[i];\n                sub_path.push(command.join(\" \"));\n                end_point = getNextEndPoint(end_point, command);\n                i++;\n            }\n\n            sub_paths.push(sub_path.join(\" \"));\n        }\n\n        return sub_paths;\n    }\n\n    function getNextEndPoint(end_point, command) {\n        var x = end_point[0],\n            y = end_point[1];\n        if (isRelative(command)) {\n            switch (command[0]) {\n                case \"h\":\n                    x += command[1];\n                    break;\n                case \"v\":\n                    y += command[1];\n                    break;\n                case \"z\":\n                    // back to [0,0]?\n                    x = 0;\n                    y = 0;\n                    break;\n                default:\n                    x += command[command.length - 2];\n                    y += command[command.length - 1];\n            }\n        } else {\n            switch (command[0]) {\n                case \"H\":\n                    x = command[1];\n                    break;\n                case \"V\":\n                    y = command[1];\n                    break;\n                case \"Z\":\n                    // back to [0,0]?\n                    x = 0;\n                    y = 0;\n                    break;\n                default:\n                    x = command[command.length - 2];\n                    y = command[command.length - 1];\n            }\n        }\n        return [x, y];\n    }\n\n    function isRelative(command) {\n        return command[0] === command[0].toLowerCase();\n    }\n\n    function endSubPath(commands, index) {\n        if (index >= commands.length) {\n            return true;\n        } else {\n            return commands[index][0].toLowerCase() === \"m\";\n        }\n    }\n\n    return pathToAbsoluteSubPaths(pathData);\n}\n","import \"./Images.css\";\nimport React, {useState, useRef} from \"react\";\nimport uploadIcon from \"./upload-solid.svg\";\nimport downloadIcon from \"./download-solid.svg\";\nimport {OptimizeSvg} from \"./OptimizeSvg\";\n\nexport default function Images() {\n    const fileInputField = useRef(null);\n    const outputFileContainer = useRef(null);\n    const [inputFile, setInputFile] = useState(null);\n    const [outputFile, setOutputFile] = useState(null);\n    const [dragging, setDragging] = useState(false);\n    const [width, setWidth] = useState(0);\n    const [height, setHeight] = useState(0);\n\n    const preventDefaultFn = e => {\n        e.preventDefault();\n    };\n\n    const onDragEnter = e => {\n        setDragging(true);\n    };\n\n    const onDragLeave = e => {\n        setDragging(false);\n    };\n\n    const fileDrop = e => {\n        e.preventDefault();\n        const files = e.dataTransfer.files;\n        if (files.length === 1) {\n            handleInputFile(files[0]);\n        }\n    };\n\n    const handleNewFileUpload = e => {\n        const {files} = e.target;\n        if (files.length === 1) {\n            handleInputFile(files[0]);\n        }\n    };\n\n    const setWidthAndHeight = (w, h) => {\n        setWidth(w);\n        setHeight(h);\n    };\n\n    const handleInputFile = file => {\n        setInputFile(file);\n        OptimizeSvg(\n            URL.createObjectURL(file),\n            setOutputFile,\n            setWidthAndHeight\n        );\n    };\n\n    // Simulates click of hidden input element for all upload actions\n    const handleUploadAction = () => {\n        fileInputField.current.click();\n    };\n\n    const didUploadSvgFile =\n        inputFile &&\n        inputFile.type.split(\"/\")[0] === \"image\" &&\n        inputFile.type.split(\"/\")[1].indexOf(\"svg\") !== -1;\n\n    // Set the output file preview\n    if (didUploadSvgFile && outputFile) {\n        outputFileContainer.current.innerHTML = outputFile;\n    }\n\n    return (\n        <div className=\"Images\">\n            <input\n                style={{display: \"none\"}}\n                type=\"file\"\n                ref={fileInputField}\n                onChange={handleNewFileUpload}\n            />\n            {didUploadSvgFile ? (\n                <div className=\"Images-input\">\n                    <img\n                        className=\"input-svg-preview\"\n                        src={URL.createObjectURL(inputFile)}\n                        alt=\"input svg\"\n                        width={width}\n                        height={height}\n                    />\n                    <img\n                        src={uploadIcon}\n                        className=\"upload-button cursor-pointer\"\n                        onClick={handleUploadAction}\n                        alt=\"upload file\"\n                        width=\"40\"\n                        height=\"40\"></img>\n                </div>\n            ) : (\n                <div\n                    className={`file-upload-area cursor-pointer${\n                        dragging ? \" hovering\" : \"\"\n                    }`}\n                    onClick={handleUploadAction}\n                    onDragOver={preventDefaultFn}\n                    onDragEnter={onDragEnter}\n                    onDragLeave={onDragLeave}\n                    onDrop={fileDrop}>\n                    <p>Drag and drop your files</p>\n                    <br />\n                    <p>Click anywhere to choose from files</p>\n                </div>\n            )}\n            <div className={`Images-output${outputFile ? \"\" : \" hide\"}`}>\n                <span\n                    className=\"output-svg-preview\"\n                    ref={outputFileContainer}></span>\n                <img\n                    src={downloadIcon}\n                    className=\"download-button cursor-pointer\"\n                    onClick={handleUploadAction}\n                    alt=\"download file\"\n                    width=\"40\"\n                    height=\"40\"\n                    color=\"#ffffff\"\n                />\n            </div>\n        </div>\n    );\n}\n","import {PathSplitter} from \"./PathSplitter\";\n\nexport function OptimizeSvg(inputFileUrl, outputFileSetter, imageDimensSetter) {\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", inputFileUrl);\n    request.setRequestHeader(\"Content-Type\", \"image/svg+xml\");\n    request.addEventListener(\"load\", function (event) {\n        var response = event.target.responseText;\n        var doc = new DOMParser();\n        var xml = doc.parseFromString(response, \"image/svg+xml\");\n\n        imageDimensSetter(xml.width, xml.height);\n\n        //This is to convert HTML collection to JS Array\n        const allPaths = [...xml.getElementsByTagName(\"path\")];\n        const oldPathToNewPathsMap = {};\n        allPaths.forEach((path, index) => {\n            const parentNode = path.parentNode;\n            const newPathNodes = [];\n            PathSplitter(path.getAttribute(\"d\")).forEach(pathDataPart => {\n                const newPath = path.cloneNode(true);\n                newPath.setAttribute(\"d\", pathDataPart);\n                newPathNodes.push(newPath);\n            });\n\n            // Track all paths to be deleted and added for each parent\n            const existingData = oldPathToNewPathsMap[parentNode.toString()];\n            if (existingData) {\n                oldPathToNewPathsMap[parentNode.toString()] = {\n                    parentNode,\n                    oldPathNodes: [...existingData.oldPathNodes, path],\n                    newPathNodes: [\n                        ...existingData.newPathNodes,\n                        ...newPathNodes\n                    ]\n                };\n            } else {\n                oldPathToNewPathsMap[parentNode.toString()] = {\n                    parentNode,\n                    oldPathNodes: [path],\n                    newPathNodes: newPathNodes\n                };\n            }\n        });\n\n        // Delete all the old paths and add all the new paths for each parent\n        Object.keys(oldPathToNewPathsMap).forEach(parentNodeKey => {\n            const {\n                parentNode,\n                oldPathNodes,\n                newPathNodes\n            } = oldPathToNewPathsMap[parentNodeKey];\n            oldPathNodes.forEach(oldPath => parentNode.removeChild(oldPath));\n            newPathNodes.forEach(newPath => parentNode.appendChild(newPath));\n        });\n\n        //Convert the new XML document to svg string\n        var svgData = new XMLSerializer().serializeToString(xml);\n        outputFileSetter(svgData);\n    });\n    return request.send();\n}\n","import \"./App.css\";\nimport Images from \"./Images\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                SVG Optimizer\n                <h6>Chops long path data values into smaller ones</h6>\n            </header>\n\n            <Images />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}